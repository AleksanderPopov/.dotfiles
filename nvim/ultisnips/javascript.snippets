# imports
snippet r
require('${1:module_name}')${2:;}
endsnippet
snippet rd
const ${1} = require('${1}');
endsnippet
snippet i "import xyz from 'xyz'"
import ${1} from '${2:$1}';
endsnippet
snippet ias "import * as xyz from 'xyz'"
import * as ${1} from '${2:$1}';
endsnippet


# function and method declarations
snippet f "arrow func"
${1:async }(${2:...args}) => ${3:console.log(args)}
endsnippet
snippet df "arrow func declaration"
const ${1:func} = ${2:async }(${3:...args}) => ${4:console.log(args)}
endsnippet
snippet m "class method"
${1:method_name_and_modifiers}(${2:...args}) {
	${3:throw new Error('To be implemented')}
}
endsnippet


# conditions
snippet ?
${1}? ${2}: ${3}
endsnippet
snippet if "if (condition) { ... }"
if (${1}) {
  ${2}
}${3}
endsnippet
snippet ife "if (condition) { ... } else { ... }"
if (${1}) {
  ${2}
} else {
  ${3}
}${4}
endsnippet


# error handling
snippet try "try { ... } catch(e) { ... }"
try {
  ${0:${VISUAL}}
} catch (${1:e}) {
  ${2:/* handle error */}
}
endsnippet
snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
  ${0:${VISUAL}}
} catch (${1:e}) {
  ${2:/* handle error */}
} finally {
  ${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

# loops
snippet for "for (const ... of ...) { ... }"
for (const ${1:item} of ${2:array}) {
	${0:${VISUAL}}
}
endsnippet
snippet fori "for (let ... ; ... ; ...) { ... }"
for (let ${1:i} = 0; ${2:$1} < ${3:to}; ${4:$1} += 1) {
	${0:${VISUAL}}
}
endsnippet


# logging
snippet log "Insert cosole.log"
console.log($1)
endsnippet
snippet logc "Insert log with color"
console.log('\x1b[31m$1')
endsnippet
snippet logt "console.time ... console.timeEnd"
console.time("${1:label}")
${0:${VISUAL}}
console.timeEnd("$1")
endsnippet


# other
snippet jsonp
JSON.parse(${0:jstr})
endsnippet
snippet jsons
JSON.stringify(${0:object})
endsnippet
snippet terr
throw new Error('${1:error message}')
endsnippet
